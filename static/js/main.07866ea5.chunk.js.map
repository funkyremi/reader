{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","text","possibleConstructorReturn","getPrototypeOf","call","state","reading","textContent","textContentArray","split","wpm","intervalId","currentWord","Number","_this2","textSelector","document","querySelector","value","length","setState","setInterval","textArray","clearInterval","shift","getIntervalMsFromWPM","event","target","_this3","react_default","a","createElement","className","onKeyUp","e","handleTextKeyUp","autoFocus","rows","placeholder","defaultValue","type","handleWpmKeyUp","onClick","startReading","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAuGeA,cApGb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAEjB,IAAMM,EAAO,6IAFI,OACjBJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KAEDS,MAAQ,CACXC,SAAS,EACTC,YAAaN,EACbO,iBAAkBP,EAAKQ,MAAM,KAC7BC,IAAK,MACLC,WAAY,KACZC,YAAa,MATEf,oFAYEa,GACnB,OAAO,KAAQG,OAAOH,GAAO,2CAEhB,IAAAI,EAAAd,KACPe,EAAeC,SAASC,cAAc,iBACxCF,GAAgBA,EAAaG,OAASH,EAAaG,MAAMC,OAAS,GACpEnB,KAAKoB,SAAS,CACZd,SAAS,EACTE,iBAAkBO,EAAaG,MAAMT,MAAM,OAG/C,IAAME,EAAaU,YAAY,WAC7B,IAAMC,EAAYR,EAAKT,MAAMG,iBACJ,IAArBc,EAAUH,QACZI,cAAcT,EAAKT,MAAMM,YACzBG,EAAKM,SAAS,CACZd,SAAS,KAGXQ,EAAKM,SAAS,CACZZ,iBAAkBc,IAGtBR,EAAKM,SAAS,CACZR,YAAaU,EAAU,KAEzBA,EAAUE,SACTxB,KAAKyB,qBAAqBZ,OAAOb,KAAKK,MAAMK,OAC/CV,KAAKoB,SAAS,CACZT,sDAGWe,GACb1B,KAAKoB,SAAS,CACZV,IAAKgB,EAAMC,OAAOT,gDAGNQ,GACd1B,KAAKoB,SAAS,CACZb,YAAamB,EAAMC,OAAOT,yCAGrB,IAAAU,EAAA5B,KACP,OAAIA,KAAKK,MAAMC,QAEXuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAoBhC,KAAKK,MAAMO,cAKjDiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YACEC,UAAU,4BACVC,QAAS,SAAAC,GAAC,OAAIN,EAAKO,gBAAgBD,IACnCE,WAAS,EACTC,KAAK,IACLC,YAAY,uBACZC,aAAcvC,KAAKK,MAAME,cAG3BsB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACES,KAAK,OACLR,UAAU,eACVC,QAAS,SAAAC,GAAC,OAAIN,EAAKa,eAAeP,IAClCI,YAAY,yBACZC,aAAcvC,KAAKK,MAAMK,MAE3BmB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACVU,QAAS,kBAAMd,EAAKe,iBAFtB,0BAxFMC,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07866ea5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const text = \"You can read up to 1000 words by minutes with this reader but I recommand starting at 300 and increasing according to your brain speed :-)\";\n    this.state = {\n      reading: false,\n      textContent: text,\n      textContentArray: text.split(' '),\n      wpm: '300',\n      intervalId: null,\n      currentWord: null,\n    }\n  }\n  getIntervalMsFromWPM(wpm) {\n    return 1000 / (Number(wpm) / 60);\n  }\n  startReading() {\n    const textSelector = document.querySelector(\".text-content\");\n    if (textSelector && textSelector.value && textSelector.value.length > 0) {\n      this.setState({\n        reading: true,\n        textContentArray: textSelector.value.split(\" \")\n      });\n    }\n    const intervalId = setInterval(() => {\n      const textArray = this.state.textContentArray;\n      if (textArray.length === 0) {\n        clearInterval(this.state.intervalId);\n        this.setState({\n          reading: false,\n        })\n      } else {\n        this.setState({\n          textContentArray: textArray,\n        })\n      }\n      this.setState({\n        currentWord: textArray[0],\n      })\n      textArray.shift();\n    }, this.getIntervalMsFromWPM(Number(this.state.wpm)));\n    this.setState({\n      intervalId,\n    });\n  }\n  handleWpmKeyUp(event) {\n    this.setState({\n      wpm: event.target.value\n    });\n  }\n  handleTextKeyUp(event) {\n    this.setState({\n      textContent: event.target.value\n    });\n  }\n  render() {\n    if (this.state.reading) {\n      return (\n        <div className=\"box\">\n          <span className=\"text text-center\">{this.state.currentWord}</span>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h1 className=\"text-center\">Fast reader</h1>\n          <br />\n          <br />\n          <br />\n          <textarea\n            className=\"form-control text-content\"\n            onKeyUp={e => this.handleTextKeyUp(e)}\n            autoFocus\n            rows=\"8\"\n            placeholder=\"Paste your text here\"\n            defaultValue={this.state.textContent}\n          >\n          </textarea>\n          <br />\n          <div className=\"text-center\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onKeyUp={e => this.handleWpmKeyUp(e)}\n              placeholder=\"Number of words/minute\"\n              defaultValue={this.state.wpm}\n            />\n            <br />\n            <button\n              className=\"btn btn-default\"\n              onClick={() => this.startReading()}\n            >\n              Start reading\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}